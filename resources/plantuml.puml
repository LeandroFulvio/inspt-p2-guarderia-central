@startuml
hide circle
skinparam classAttributeIconSize 0
skinparam backgroundColor transparent
skinparam monochrome true
skinparam shadowing false

Class05 o-- Class06
Class07 .. Class08
Class09 -- Class10

enum      TipoVehiculo {
  MOTORHOME
  CASARODANTE
  ARRASTRE
  CARAVANA
  TRAILER
}

class     Dimensiones {
  alto : Integer
  largo : Integer
  ancho : Integer
}
/'
**** Vehiculo Composicion con Dimensiones ****
**** Vehiculo Agregacion con TipoVehiculo ****
'/
Vehiculo o-- TipoVehiculo : tipo
Vehiculo *-- Dimensiones : dimensiones

class Vehiculo {
  matricula : String
  nombre : String
  fechaAsignacion : Date

    + setFechaAsignacion(Date)
}

Vehiculo "*" <-- "1" Socio : vehiculos

class     Garage {
  numero : Integer
  contadorLuz : Integer
  mantenimiento : Boolean
  fechaCompra : Date

    + dimensionesAptas(Dimensiones) : Boolean
    + comprar(Socio)
    + leerContadorLuz : Integer
}
/'
**** Garage Composicion con Vehiculo ****
**** Garage Agregacion con Zona ****
'/
Garage o-- Vehiculo : vehiculo
Garage o-- Zona : zona
Garage o-- Socio : socio
/'
**** Garage Agregacion con Socio **** ?? No se si es ideal...
'/

class     Guarderia {
  usuario : Usuario
  garages : List<Garage>

    + venderGarage(Garage, Socio)
    + leerContadorLuz() : Integer
    + contratarMantenimiento()
}

Guarderia *--> Garage : garages
Guarderia --> Usuario : usuario

class     Zona {
  letra : String
  capacidad : Integer
  cantidadVehiculos : Integer
  empleadosAsignados : List<Empleado>
}

Zona o-- Dimensiones : dimensionGarages
Zona "1" *-- "many" TipoVehiculo : vehiculosAdminitos
Zona "1" *-- "many" Empleado : empleadosAsignados


abstract class Usuario {
  nombre : String
  password : String
  direccion : String
  telefono : String
}

class     Socio {
  fechaIngreso : Date
  vehiculos : List<Vehiculo>

  - consultarDisponibilidad(Vehiculo v) : Boolean

}

class     Empleado {
  codigo : Integer
  especialidad : String

  asignacion : List<Zona>

}

class     Administrador {


}

Usuario <|-- Administrador
Usuario <|-- Empleado
Usuario <|-- Socio


Class EntradaSalida {
  +leerCadena(textoDelMensaje : String) : String
  +leerDouble(textoDelMensaje : String) : Float
  +leerInt(textoDelMensaje : String) : Integer
  +mostrarMensaje(textoDelMensaje : String)
  +leerPassword(textoDelMensaje : String)
}


@enduml
